# Autogenerated from a Treetop grammar. Edits may be lost.

# Gift format treetop parser

#:nodoc: all
module Gift
  include Treetop::Runtime

  def root
    @root ||= :gift
  end

  module Gift0
    def question
      elements[1]
    end

    def blank_line
      elements[2]
    end
  end

  module Gift1
    
    @current_category
    
    def questions
      elements.map{|e| e.question}
    end
    
    def commands
      elements.map{|e| e.elements[0].elements[0].command_text}
    end
  end

  def _nt_gift
    start_index = index
    if node_cache[:gift].has_key?(index)
      cached = node_cache[:gift][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1, s1 = index, []
      s2, i2 = [], index
      loop do
        r3 = _nt_command
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s1 << r2
      if r2
        r4 = _nt_question
        s1 << r4
        if r4
          r5 = _nt_blank_line
          s1 << r5
        end
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(Gift0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Gift1)
    end

    node_cache[:gift][start_index] = r0

    r0
  end

  module Command0
  end

  module Command1
    def line_break
      elements[2]
    end
  end

  def _nt_command
    start_index = index
    if node_cache[:command].has_key?(index)
      cached = node_cache[:command][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('$', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('$')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        r5 = _nt_line_break
        if r5
          r4 = nil
        else
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if index < input_length
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r6 = nil
          end
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Command0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        r7 = _nt_line_break
        s0 << r7
      end
    end
    if s0.last
      r0 = instantiate_node(Command,input, i0...index, s0)
      r0.extend(Command1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:command][start_index] = r0

    r0
  end

  def _nt_question
    start_index = index
    if node_cache[:question].has_key?(index)
      cached = node_cache[:question][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_essay_question
    if r1
      r0 = r1
    else
      r2 = _nt_true_false_question
      if r2
        r0 = r2
      else
        r3 = _nt_match_question
        if r3
          r0 = r3
        else
          r4 = _nt_fill_in_question
          if r4
            r0 = r4
          else
            r5 = _nt_short_answer_question
            if r5
              r0 = r5
            else
              r6 = _nt_mutiple_choice_question
              if r6
                r0 = r6
              else
                r7 = _nt_numeric_question
                if r7
                  r0 = r7
                else
                  r8 = _nt_description_question
                  if r8
                    r0 = r8
                  else
                    @index = i0
                    r0 = nil
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:question][start_index] = r0

    r0
  end

  module EssayQuestion0
    def _comment
      elements[0]
    end

    def _title
      elements[1]
    end

    def _markup
      elements[3]
    end

    def question_text
      elements[4]
    end

  end

  def _nt_essay_question
    start_index = index
    if node_cache[:essay_question].has_key?(index)
      cached = node_cache[:essay_question][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_comment
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r4 = _nt_title
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
      if r3
        r6 = _nt_space
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r5
        if r5
          r8 = _nt_markup
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r7
          if r7
            r9 = _nt_question_text
            s0 << r9
            if r9
              if has_terminal?('{', false, index)
                r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('{')
                r10 = nil
              end
              s0 << r10
              if r10
                r12 = _nt_nbsp
                if r12
                  r11 = r12
                else
                  r11 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r11
                if r11
                  if has_terminal?('}', false, index)
                    r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('}')
                    r13 = nil
                  end
                  s0 << r13
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(EssayQuestion,input, i0...index, s0)
      r0.extend(EssayQuestion0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:essay_question][start_index] = r0

    r0
  end

  module TrueFalseQuestion0
    def _comment
      elements[0]
    end

    def _title
      elements[1]
    end

    def _markup
      elements[3]
    end

    def question_text
      elements[4]
    end

    def answer_list
      elements[7]
    end

  end

  def _nt_true_false_question
    start_index = index
    if node_cache[:true_false_question].has_key?(index)
      cached = node_cache[:true_false_question][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_comment
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r4 = _nt_title
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
      if r3
        r6 = _nt_space
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r5
        if r5
          r8 = _nt_markup
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r7
          if r7
            r9 = _nt_question_text
            s0 << r9
            if r9
              if has_terminal?('{', false, index)
                r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('{')
                r10 = nil
              end
              s0 << r10
              if r10
                r12 = _nt_space
                if r12
                  r11 = r12
                else
                  r11 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r11
                if r11
                  i13 = index
                  r14 = _nt_true_answer
                  if r14
                    r13 = r14
                  else
                    r15 = _nt_false_answer
                    if r15
                      r13 = r15
                    else
                      @index = i13
                      r13 = nil
                    end
                  end
                  s0 << r13
                  if r13
                    r17 = _nt_space
                    if r17
                      r16 = r17
                    else
                      r16 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s0 << r16
                    if r16
                      if has_terminal?('}', false, index)
                        r18 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure('}')
                        r18 = nil
                      end
                      s0 << r18
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(TrueFalseQuestion,input, i0...index, s0)
      r0.extend(TrueFalseQuestion0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:true_false_question][start_index] = r0

    r0
  end

  module ShortAnswerQuestion0
    def _comment
      elements[0]
    end

    def _title
      elements[1]
    end

    def _markup
      elements[3]
    end

    def question_text
      elements[4]
    end

    def answer_list
      elements[7]
    end

  end

  def _nt_short_answer_question
    start_index = index
    if node_cache[:short_answer_question].has_key?(index)
      cached = node_cache[:short_answer_question][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_comment
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r4 = _nt_title
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
      if r3
        r6 = _nt_space
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r5
        if r5
          r8 = _nt_markup
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r7
          if r7
            r9 = _nt_question_text
            s0 << r9
            if r9
              if has_terminal?('{', false, index)
                r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('{')
                r10 = nil
              end
              s0 << r10
              if r10
                r12 = _nt_space
                if r12
                  r11 = r12
                else
                  r11 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r11
                if r11
                  s13, i13 = [], index
                  loop do
                    r14 = _nt_right_answer
                    if r14
                      s13 << r14
                    else
                      break
                    end
                  end
                  if s13.empty?
                    @index = i13
                    r13 = nil
                  else
                    r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
                  end
                  s0 << r13
                  if r13
                    r16 = _nt_space
                    if r16
                      r15 = r16
                    else
                      r15 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s0 << r15
                    if r15
                      if has_terminal?('}', false, index)
                        r17 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure('}')
                        r17 = nil
                      end
                      s0 << r17
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(ShortAnswerQuestion,input, i0...index, s0)
      r0.extend(ShortAnswerQuestion0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:short_answer_question][start_index] = r0

    r0
  end

  module MutipleChoiceQuestion0
    def _comment
      elements[0]
    end

    def _title
      elements[1]
    end

    def _markup
      elements[3]
    end

    def question_text
      elements[4]
    end

    def answer_list
      elements[7]
    end

  end

  def _nt_mutiple_choice_question
    start_index = index
    if node_cache[:mutiple_choice_question].has_key?(index)
      cached = node_cache[:mutiple_choice_question][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_comment
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r4 = _nt_title
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
      if r3
        r6 = _nt_space
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r5
        if r5
          r8 = _nt_markup
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r7
          if r7
            r9 = _nt_question_text
            s0 << r9
            if r9
              if has_terminal?('{', false, index)
                r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('{')
                r10 = nil
              end
              s0 << r10
              if r10
                r12 = _nt_space
                if r12
                  r11 = r12
                else
                  r11 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r11
                if r11
                  s13, i13 = [], index
                  loop do
                    i14 = index
                    r15 = _nt_wrong_answer
                    if r15
                      r14 = r15
                    else
                      r16 = _nt_right_answer
                      if r16
                        r14 = r16
                      else
                        @index = i14
                        r14 = nil
                      end
                    end
                    if r14
                      s13 << r14
                    else
                      break
                    end
                  end
                  if s13.empty?
                    @index = i13
                    r13 = nil
                  else
                    r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
                  end
                  s0 << r13
                  if r13
                    r18 = _nt_space
                    if r18
                      r17 = r18
                    else
                      r17 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s0 << r17
                    if r17
                      if has_terminal?('}', false, index)
                        r19 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure('}')
                        r19 = nil
                      end
                      s0 << r19
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(MultipleChoiceQuestion,input, i0...index, s0)
      r0.extend(MutipleChoiceQuestion0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:mutiple_choice_question][start_index] = r0

    r0
  end

  module NumericQuestion0
    def _comment
      elements[0]
    end

    def _title
      elements[1]
    end

    def _markup
      elements[3]
    end

    def question_text
      elements[4]
    end

    def answer_list
      elements[7]
    end

  end

  def _nt_numeric_question
    start_index = index
    if node_cache[:numeric_question].has_key?(index)
      cached = node_cache[:numeric_question][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_comment
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r4 = _nt_title
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
      if r3
        r6 = _nt_space
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r5
        if r5
          r8 = _nt_markup
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r7
          if r7
            r9 = _nt_question_text
            s0 << r9
            if r9
              if has_terminal?('{#', false, index)
                r10 = instantiate_node(SyntaxNode,input, index...(index + 2))
                @index += 2
              else
                terminal_parse_failure('{#')
                r10 = nil
              end
              s0 << r10
              if r10
                r12 = _nt_space
                if r12
                  r11 = r12
                else
                  r11 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r11
                if r11
                  s13, i13 = [], index
                  loop do
                    r14 = _nt_numeric_answer
                    if r14
                      s13 << r14
                    else
                      break
                    end
                  end
                  if s13.empty?
                    @index = i13
                    r13 = nil
                  else
                    r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
                  end
                  s0 << r13
                  if r13
                    if has_terminal?('}', false, index)
                      r15 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure('}')
                      r15 = nil
                    end
                    s0 << r15
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(NumericQuestion,input, i0...index, s0)
      r0.extend(NumericQuestion0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:numeric_question][start_index] = r0

    r0
  end

  module MatchQuestion0
    def _comment
      elements[0]
    end

    def _title
      elements[1]
    end

    def _markup
      elements[3]
    end

    def question_text
      elements[4]
    end

    def answer_list
      elements[7]
    end

  end

  def _nt_match_question
    start_index = index
    if node_cache[:match_question].has_key?(index)
      cached = node_cache[:match_question][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_comment
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r4 = _nt_title
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
      if r3
        r6 = _nt_space
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r5
        if r5
          r8 = _nt_markup
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r7
          if r7
            r9 = _nt_question_text
            s0 << r9
            if r9
              if has_terminal?('{', false, index)
                r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('{')
                r10 = nil
              end
              s0 << r10
              if r10
                r12 = _nt_space
                if r12
                  r11 = r12
                else
                  r11 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r11
                if r11
                  s13, i13 = [], index
                  loop do
                    r14 = _nt_match_answer
                    if r14
                      s13 << r14
                    else
                      break
                    end
                  end
                  if s13.empty?
                    @index = i13
                    r13 = nil
                  else
                    r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
                  end
                  s0 << r13
                  if r13
                    if has_terminal?('}', false, index)
                      r15 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure('}')
                      r15 = nil
                    end
                    s0 << r15
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(MatchQuestion,input, i0...index, s0)
      r0.extend(MatchQuestion0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:match_question][start_index] = r0

    r0
  end

  module FillInQuestion0
  end

  module FillInQuestion1
  end

  module FillInQuestion2
    def _comment
      elements[0]
    end

    def _title
      elements[1]
    end

    def _markup
      elements[3]
    end

    def question_text
      elements[4]
    end

    def answer_list
      elements[7]
    end

    def _suffix
      elements[10]
    end
  end

  def _nt_fill_in_question
    start_index = index
    if node_cache[:fill_in_question].has_key?(index)
      cached = node_cache[:fill_in_question][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_comment
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r4 = _nt_title
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
      if r3
        r6 = _nt_space
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r5
        if r5
          r8 = _nt_markup
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r7
          if r7
            r9 = _nt_question_text
            s0 << r9
            if r9
              if has_terminal?('{', false, index)
                r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('{')
                r10 = nil
              end
              s0 << r10
              if r10
                r12 = _nt_space
                if r12
                  r11 = r12
                else
                  r11 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r11
                if r11
                  s13, i13 = [], index
                  loop do
                    i14 = index
                    r15 = _nt_wrong_answer
                    if r15
                      r14 = r15
                    else
                      r16 = _nt_right_answer
                      if r16
                        r14 = r16
                      else
                        @index = i14
                        r14 = nil
                      end
                    end
                    if r14
                      s13 << r14
                    else
                      break
                    end
                  end
                  if s13.empty?
                    @index = i13
                    r13 = nil
                  else
                    r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
                  end
                  s0 << r13
                  if r13
                    r18 = _nt_space
                    if r18
                      r17 = r18
                    else
                      r17 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s0 << r17
                    if r17
                      if has_terminal?('}', false, index)
                        r19 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure('}')
                        r19 = nil
                      end
                      s0 << r19
                      if r19
                        s20, i20 = [], index
                        loop do
                          i21, s21 = index, []
                          i22 = index
                          if has_terminal?('\G[\\r\\n]', true, index)
                            r23 = true
                            @index += 1
                          else
                            r23 = nil
                          end
                          if r23
                            r22 = nil
                          else
                            @index = i22
                            r22 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s21 << r22
                          if r22
                            i24 = index
                            i25, s25 = index, []
                            if has_terminal?("\\", false, index)
                              r26 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure("\\")
                              r26 = nil
                            end
                            s25 << r26
                            if r26
                              if has_terminal?('\G[=~{}#:]', true, index)
                                r27 = true
                                @index += 1
                              else
                                r27 = nil
                              end
                              s25 << r27
                            end
                            if s25.last
                              r25 = instantiate_node(SyntaxNode,input, i25...index, s25)
                              r25.extend(FillInQuestion0)
                            else
                              @index = i25
                              r25 = nil
                            end
                            if r25
                              r24 = r25
                            else
                              if index < input_length
                                r28 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                @index += 1
                              else
                                terminal_parse_failure("any character")
                                r28 = nil
                              end
                              if r28
                                r24 = r28
                              else
                                @index = i24
                                r24 = nil
                              end
                            end
                            s21 << r24
                          end
                          if s21.last
                            r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
                            r21.extend(FillInQuestion1)
                          else
                            @index = i21
                            r21 = nil
                          end
                          if r21
                            s20 << r21
                          else
                            break
                          end
                        end
                        if s20.empty?
                          @index = i20
                          r20 = nil
                        else
                          r20 = instantiate_node(SyntaxNode,input, i20...index, s20)
                        end
                        s0 << r20
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(FillInQuestion,input, i0...index, s0)
      r0.extend(FillInQuestion2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:fill_in_question][start_index] = r0

    r0
  end

  module DescriptionQuestion0
    def _comment
      elements[0]
    end

    def _title
      elements[1]
    end

    def _markup
      elements[3]
    end

    def question_text
      elements[4]
    end
  end

  def _nt_description_question
    start_index = index
    if node_cache[:description_question].has_key?(index)
      cached = node_cache[:description_question][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_comment
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r4 = _nt_title
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
      if r3
        r6 = _nt_space
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r5
        if r5
          r8 = _nt_markup
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r7
          if r7
            r9 = _nt_question_text
            s0 << r9
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(DescriptionQuestion,input, i0...index, s0)
      r0.extend(DescriptionQuestion0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:description_question][start_index] = r0

    r0
  end

  module Number0
  end

  module Number1
  end

  def _nt_number
    start_index = index
    if node_cache[:number].has_key?(index)
      cached = node_cache[:number][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[+-]', true, index)
      r2 = true
      @index += 1
    else
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        if has_terminal?('\G[\\d]', true, index)
          r4 = true
          @index += 1
        else
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s0 << r3
      if r3
        i6, s6 = index, []
        i7 = index
        if has_terminal?("..", false, index)
          r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure("..")
          r8 = nil
        end
        if r8
          r7 = nil
        else
          @index = i7
          r7 = instantiate_node(SyntaxNode,input, index...index)
        end
        s6 << r7
        if r7
          if has_terminal?(".", false, index)
            r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(".")
            r9 = nil
          end
          s6 << r9
          if r9
            s10, i10 = [], index
            loop do
              if has_terminal?('\G[\\d]', true, index)
                r11 = true
                @index += 1
              else
                r11 = nil
              end
              if r11
                s10 << r11
              else
                break
              end
            end
            r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
            s6 << r10
          end
        end
        if s6.last
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          r6.extend(Number0)
        else
          @index = i6
          r6 = nil
        end
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r5
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Number1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:number][start_index] = r0

    r0
  end

  module Weight0
  end

  def _nt_weight
    start_index = index
    if node_cache[:weight].has_key?(index)
      cached = node_cache[:weight][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("%", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("%")
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('\G[+-]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        if has_terminal?('\G[1]', true, index)
          r5 = true
          @index += 1
        else
          r5 = nil
        end
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          if has_terminal?('\G[\\d]', true, index)
            r7 = true
            @index += 1
          else
            r7 = nil
          end
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r6
          if r6
            if has_terminal?('\G[\\d]', true, index)
              r8 = true
              @index += 1
            else
              r8 = nil
            end
            s0 << r8
            if r8
              if has_terminal?(".", false, index)
                r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(".")
                r10 = nil
              end
              if r10
                r9 = r10
              else
                r9 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r9
              if r9
                if has_terminal?('\G[\\d]', true, index)
                  r12 = true
                  @index += 1
                else
                  r12 = nil
                end
                if r12
                  r11 = r12
                else
                  r11 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r11
                if r11
                  if has_terminal?('\G[\\d]', true, index)
                    r14 = true
                    @index += 1
                  else
                    r14 = nil
                  end
                  if r14
                    r13 = r14
                  else
                    r13 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s0 << r13
                  if r13
                    if has_terminal?("%", false, index)
                      r15 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure("%")
                      r15 = nil
                    end
                    s0 << r15
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Weight0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:weight][start_index] = r0

    r0
  end

  module NumericAnswer0
    def value
      elements[0]
    end

  end

  module NumericAnswer1
    def answer
     {:maximum => value.maximum, :minimum => value.minimum}
    end
  end

  def _nt_numeric_answer
    start_index = index
    if node_cache[:numeric_answer].has_key?(index)
      cached = node_cache[:numeric_answer][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_range
    if r2
      r1 = r2
    else
      r3 = _nt_numeric_with_tolerance
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      r5 = _nt_space
      if r5
        r4 = r5
      else
        r4 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r4
      if r4
        r7 = _nt_feedback
        if r7
          r6 = r7
        else
          r6 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r6
        if r6
          r9 = _nt_space
          if r9
            r8 = r9
          else
            r8 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r8
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(NumericAnswer0)
      r0.extend(NumericAnswer1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:numeric_answer][start_index] = r0

    r0
  end

  module NumericWithTolerance0
    def number
      elements[1]
    end
  end

  module NumericWithTolerance1
    def number
      elements[2]
    end

  end

  module NumericWithTolerance2
    def maximum
      ans = Float(elements[2].text_value)
      ans += Float(elements[3].elements[1].text_value) unless elements[3].text_value.blank?
      return ans
    end
    
    def minimum
      ans = Float(elements[2].text_value)
      ans -= Float(elements[3].elements[1].text_value) unless elements[3].text_value.blank?
      return ans
    end
  end

  def _nt_numeric_with_tolerance
    start_index = index
    if node_cache[:numeric_with_tolerance].has_key?(index)
      cached = node_cache[:numeric_with_tolerance][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("=", false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("=")
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r4 = _nt_weight
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
      if r3
        r5 = _nt_number
        s0 << r5
        if r5
          i7, s7 = index, []
          if has_terminal?(':', false, index)
            r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(':')
            r8 = nil
          end
          s7 << r8
          if r8
            r9 = _nt_number
            s7 << r9
          end
          if s7.last
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            r7.extend(NumericWithTolerance0)
          else
            @index = i7
            r7 = nil
          end
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r6
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(NumericWithTolerance1)
      r0.extend(NumericWithTolerance2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:numeric_with_tolerance][start_index] = r0

    r0
  end

  module Range0
    def number1
      elements[0]
    end

    def number2
      elements[2]
    end
  end

  module Range1
    def maximum
      Float(elements[0].text_value)
    end
    
    def minimum
      Float(elements[2].text_value)
    end
  end

  def _nt_range
    start_index = index
    if node_cache[:range].has_key?(index)
      cached = node_cache[:range][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_number
    s0 << r1
    if r1
      if has_terminal?('..', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('..')
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_number
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Range0)
      r0.extend(Range1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:range][start_index] = r0

    r0
  end

  module WrongAnswer0
  end

  module WrongAnswer1
  end

  module WrongAnswer2
  end

  module WrongAnswer3
    def answer
      ans = { :value => elements[2].text_value.rstrip, :correct => false, :feedback => elements[4].text_value.rstrip[1..-1] }
      ans[:weight] = Float(elements[1].text_value[1..-2]) if elements[1].text_value != ""
      return ans
    end
  end

  def _nt_wrong_answer
    start_index = index
    if node_cache[:wrong_answer].has_key?(index)
      cached = node_cache[:wrong_answer][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("~", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("~")
      r1 = nil
    end
    s0 << r1
    if r1
      r3 = _nt_weight
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        s4, i4 = [], index
        loop do
          i5, s5 = index, []
          i6 = index
          if has_terminal?('\G[=~}#]', true, index)
            r7 = true
            @index += 1
          else
            r7 = nil
          end
          if r7
            r6 = nil
          else
            @index = i6
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s5 << r6
          if r6
            i8 = index
            i9, s9 = index, []
            if has_terminal?("\\", false, index)
              r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("\\")
              r10 = nil
            end
            s9 << r10
            if r10
              if has_terminal?('\G[=~{}#:]', true, index)
                r11 = true
                @index += 1
              else
                r11 = nil
              end
              s9 << r11
            end
            if s9.last
              r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
              r9.extend(WrongAnswer0)
            else
              @index = i9
              r9 = nil
            end
            if r9
              r8 = r9
            else
              if index < input_length
                r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("any character")
                r12 = nil
              end
              if r12
                r8 = r12
              else
                @index = i8
                r8 = nil
              end
            end
            s5 << r8
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(WrongAnswer1)
          else
            @index = i5
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
        if r4
          r14 = _nt_space
          if r14
            r13 = r14
          else
            r13 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r13
          if r13
            r16 = _nt_feedback
            if r16
              r15 = r16
            else
              r15 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r15
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(WrongAnswer2)
      r0.extend(WrongAnswer3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:wrong_answer][start_index] = r0

    r0
  end

  module RightAnswer0
  end

  module RightAnswer1
  end

  module RightAnswer2
  end

  module RightAnswer3
    def answer
      ans = { :value => elements[2].text_value.rstrip, :correct => true, :feedback => elements[4].text_value.rstrip[1..-1]  }
      ans[:weight] = Float(elements[1].text_value[1..-2]) if elements[1].text_value != ""
      return ans
    end
  end

  def _nt_right_answer
    start_index = index
    if node_cache[:right_answer].has_key?(index)
      cached = node_cache[:right_answer][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("=", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("=")
      r1 = nil
    end
    s0 << r1
    if r1
      r3 = _nt_weight
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        s4, i4 = [], index
        loop do
          i5, s5 = index, []
          i6 = index
          if has_terminal?('\G[=~}#]', true, index)
            r7 = true
            @index += 1
          else
            r7 = nil
          end
          if r7
            r6 = nil
          else
            @index = i6
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s5 << r6
          if r6
            i8 = index
            i9, s9 = index, []
            if has_terminal?("\\", false, index)
              r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("\\")
              r10 = nil
            end
            s9 << r10
            if r10
              if has_terminal?('\G[=~{}#:]', true, index)
                r11 = true
                @index += 1
              else
                r11 = nil
              end
              s9 << r11
            end
            if s9.last
              r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
              r9.extend(RightAnswer0)
            else
              @index = i9
              r9 = nil
            end
            if r9
              r8 = r9
            else
              if index < input_length
                r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("any character")
                r12 = nil
              end
              if r12
                r8 = r12
              else
                @index = i8
                r8 = nil
              end
            end
            s5 << r8
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(RightAnswer1)
          else
            @index = i5
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
        if r4
          r14 = _nt_space
          if r14
            r13 = r14
          else
            r13 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r13
          if r13
            r16 = _nt_feedback
            if r16
              r15 = r16
            else
              r15 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r15
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(RightAnswer2)
      r0.extend(RightAnswer3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:right_answer][start_index] = r0

    r0
  end

  module MatchAnswer0
  end

  module MatchAnswer1
  end

  module MatchAnswer2
  end

  module MatchAnswer3
  end

  module MatchAnswer4
  end

  module MatchAnswer5
    def answer
      { elements[1].text_value.strip => elements[3].text_value.strip }
    end
  end

  def _nt_match_answer
    start_index = index
    if node_cache[:match_answer].has_key?(index)
      cached = node_cache[:match_answer][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("=", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("=")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        if has_terminal?("->", false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure("->")
          r5 = nil
        end
        if r5
          r4 = nil
        else
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          i6 = index
          if has_terminal?('\G[=~}#]', true, index)
            r7 = true
            @index += 1
          else
            r7 = nil
          end
          if r7
            r6 = nil
          else
            @index = i6
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s3 << r6
          if r6
            i8 = index
            i9, s9 = index, []
            if has_terminal?("\\", false, index)
              r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("\\")
              r10 = nil
            end
            s9 << r10
            if r10
              if has_terminal?('\G[=~{}#:]', true, index)
                r11 = true
                @index += 1
              else
                r11 = nil
              end
              s9 << r11
            end
            if s9.last
              r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
              r9.extend(MatchAnswer0)
            else
              @index = i9
              r9 = nil
            end
            if r9
              r8 = r9
            else
              if index < input_length
                r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("any character")
                r12 = nil
              end
              if r12
                r8 = r12
              else
                @index = i8
                r8 = nil
              end
            end
            s3 << r8
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(MatchAnswer1)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?("->", false, index)
          r13 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure("->")
          r13 = nil
        end
        s0 << r13
        if r13
          s14, i14 = [], index
          loop do
            i15, s15 = index, []
            i16 = index
            if has_terminal?('\G[=~}#]', true, index)
              r17 = true
              @index += 1
            else
              r17 = nil
            end
            if r17
              r16 = nil
            else
              @index = i16
              r16 = instantiate_node(SyntaxNode,input, index...index)
            end
            s15 << r16
            if r16
              i18 = index
              i19, s19 = index, []
              if has_terminal?("\\", false, index)
                r20 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("\\")
                r20 = nil
              end
              s19 << r20
              if r20
                if has_terminal?('\G[=~{}#:]', true, index)
                  r21 = true
                  @index += 1
                else
                  r21 = nil
                end
                s19 << r21
              end
              if s19.last
                r19 = instantiate_node(SyntaxNode,input, i19...index, s19)
                r19.extend(MatchAnswer2)
              else
                @index = i19
                r19 = nil
              end
              if r19
                r18 = r19
              else
                if index < input_length
                  r22 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure("any character")
                  r22 = nil
                end
                if r22
                  r18 = r22
                else
                  @index = i18
                  r18 = nil
                end
              end
              s15 << r18
            end
            if s15.last
              r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
              r15.extend(MatchAnswer3)
            else
              @index = i15
              r15 = nil
            end
            if r15
              s14 << r15
            else
              break
            end
          end
          r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
          s0 << r14
          if r14
            r24 = _nt_space
            if r24
              r23 = r24
            else
              r23 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r23
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(MatchAnswer4)
      r0.extend(MatchAnswer5)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:match_answer][start_index] = r0

    r0
  end

  module TrueAnswer0
  end

  module TrueAnswer1
    def answer
      {:value => true, :correct => true, :feedback => elements[2].text_value.rstrip[1..-1]}
    end
  end

  def _nt_true_answer
    start_index = index
    if node_cache[:true_answer].has_key?(index)
      cached = node_cache[:true_answer][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?("TRUE", false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure("TRUE")
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?("T", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("T")
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      r5 = _nt_space
      if r5
        r4 = r5
      else
        r4 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r4
      if r4
        r7 = _nt_feedback
        if r7
          r6 = r7
        else
          r6 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r6
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(TrueAnswer0)
      r0.extend(TrueAnswer1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:true_answer][start_index] = r0

    r0
  end

  module FalseAnswer0
  end

  module FalseAnswer1
    def answer
      {:value => false, :correct => true, :feedback => elements[2].text_value.rstrip[1..-1]}
    end
  end

  def _nt_false_answer
    start_index = index
    if node_cache[:false_answer].has_key?(index)
      cached = node_cache[:false_answer][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?("FALSE", false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure("FALSE")
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?("F", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("F")
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      r5 = _nt_space
      if r5
        r4 = r5
      else
        r4 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r4
      if r4
        r7 = _nt_feedback
        if r7
          r6 = r7
        else
          r6 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r6
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(FalseAnswer0)
      r0.extend(FalseAnswer1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:false_answer][start_index] = r0

    r0
  end

  module Comment0
  end

  module Comment1
    def line_break
      elements[2]
    end

  end

  def _nt_comment
    start_index = index
    if node_cache[:comment].has_key?(index)
      cached = node_cache[:comment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("//", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("//")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        r5 = _nt_line_break
        if r5
          r4 = nil
        else
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if index < input_length
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r6 = nil
          end
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Comment0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        r7 = _nt_line_break
        s0 << r7
        if r7
          r9 = _nt_comment
          if r9
            r8 = r9
          else
            r8 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r8
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Comment1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:comment][start_index] = r0

    r0
  end

  module Title0
  end

  module Title1
  end

  module Title2
  end

  def _nt_title
    start_index = index
    if node_cache[:title].has_key?(index)
      cached = node_cache[:title][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('::', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('::')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        if has_terminal?("::", false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure("::")
          r5 = nil
        end
        if r5
          r4 = nil
        else
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          i6 = index
          i7, s7 = index, []
          if has_terminal?("\\", false, index)
            r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("\\")
            r8 = nil
          end
          s7 << r8
          if r8
            if has_terminal?('\G[=~{}#:]', true, index)
              r9 = true
              @index += 1
            else
              r9 = nil
            end
            s7 << r9
          end
          if s7.last
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            r7.extend(Title0)
          else
            @index = i7
            r7 = nil
          end
          if r7
            r6 = r7
          else
            if index < input_length
              r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("any character")
              r10 = nil
            end
            if r10
              r6 = r10
            else
              @index = i6
              r6 = nil
            end
          end
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Title1)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?('::', false, index)
          r11 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('::')
          r11 = nil
        end
        s0 << r11
        if r11
          r13 = _nt_line_break
          if r13
            r12 = r13
          else
            r12 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r12
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Title2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:title][start_index] = r0

    r0
  end

  module QuestionText0
  end

  module QuestionText1
  end

  def _nt_question_text
    start_index = index
    if node_cache[:question_text].has_key?(index)
      cached = node_cache[:question_text][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1, s1 = index, []
      i2 = index
      if has_terminal?("{", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("{")
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r2
      if r2
        i4 = index
        r5 = _nt_blank_line
        if r5
          r4 = nil
        else
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r4
        if r4
          i6 = index
          i7, s7 = index, []
          if has_terminal?("\\", false, index)
            r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("\\")
            r8 = nil
          end
          s7 << r8
          if r8
            if has_terminal?('\G[=~{}#:]', true, index)
              r9 = true
              @index += 1
            else
              r9 = nil
            end
            s7 << r9
          end
          if s7.last
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            r7.extend(QuestionText0)
          else
            @index = i7
            r7 = nil
          end
          if r7
            r6 = r7
          else
            if index < input_length
              r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("any character")
              r10 = nil
            end
            if r10
              r6 = r10
            else
              @index = i6
              r6 = nil
            end
          end
          s1 << r6
        end
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(QuestionText1)
      else
        @index = i1
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:question_text][start_index] = r0

    r0
  end

  module Markup0
  end

  module Markup1
  end

  module Markup2
  end

  def _nt_markup
    start_index = index
    if node_cache[:markup].has_key?(index)
      cached = node_cache[:markup][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("[", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("[")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        if has_terminal?("]", false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("]")
          r5 = nil
        end
        if r5
          r4 = nil
        else
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          i6 = index
          r7 = _nt_blank_line
          if r7
            r6 = nil
          else
            @index = i6
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s3 << r6
          if r6
            i8 = index
            i9, s9 = index, []
            if has_terminal?("\\", false, index)
              r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("\\")
              r10 = nil
            end
            s9 << r10
            if r10
              if has_terminal?('\G[=~{}#:]', true, index)
                r11 = true
                @index += 1
              else
                r11 = nil
              end
              s9 << r11
            end
            if s9.last
              r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
              r9.extend(Markup0)
            else
              @index = i9
              r9 = nil
            end
            if r9
              r8 = r9
            else
              if index < input_length
                r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("any character")
                r12 = nil
              end
              if r12
                r8 = r12
              else
                @index = i8
                r8 = nil
              end
            end
            s3 << r8
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Markup1)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?("]", false, index)
          r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("]")
          r13 = nil
        end
        s0 << r13
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Markup2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:markup][start_index] = r0

    r0
  end

  module Feedback0
  end

  module Feedback1
  end

  module Feedback2
  end

  def _nt_feedback
    start_index = index
    if node_cache[:feedback].has_key?(index)
      cached = node_cache[:feedback][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("#", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("#")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        if has_terminal?('\G[=~}#]', true, index)
          r5 = true
          @index += 1
        else
          r5 = nil
        end
        if r5
          r4 = nil
        else
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          i6 = index
          i7, s7 = index, []
          if has_terminal?("\\", false, index)
            r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("\\")
            r8 = nil
          end
          s7 << r8
          if r8
            if has_terminal?('\G[=~{}#:]', true, index)
              r9 = true
              @index += 1
            else
              r9 = nil
            end
            s7 << r9
          end
          if s7.last
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            r7.extend(Feedback0)
          else
            @index = i7
            r7 = nil
          end
          if r7
            r6 = r7
          else
            if index < input_length
              r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("any character")
              r10 = nil
            end
            if r10
              r6 = r10
            else
              @index = i6
              r6 = nil
            end
          end
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Feedback1)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Feedback2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:feedback][start_index] = r0

    r0
  end

  def _nt_line_break
    start_index = index
    if node_cache[:line_break].has_key?(index)
      cached = node_cache[:line_break][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("\r\n", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("\r\n")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("\n", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("\n")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:line_break][start_index] = r0

    r0
  end

  def _nt_nbsp
    start_index = index
    if node_cache[:nbsp].has_key?(index)
      cached = node_cache[:nbsp][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      if has_terminal?(" ", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(" ")
        r2 = nil
      end
      if r2
        r1 = r2
      else
        if has_terminal?("\t", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\t")
          r3 = nil
        end
        if r3
          r1 = r3
        else
          @index = i1
          r1 = nil
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:nbsp][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      if has_terminal?(" ", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(" ")
        r2 = nil
      end
      if r2
        r1 = r2
      else
        if has_terminal?("\t", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\t")
          r3 = nil
        end
        if r3
          r1 = r3
        else
          if has_terminal?("\r", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("\r")
            r4 = nil
          end
          if r4
            r1 = r4
          else
            if has_terminal?("\n", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("\n")
              r5 = nil
            end
            if r5
              r1 = r5
            else
              @index = i1
              r1 = nil
            end
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:space][start_index] = r0

    r0
  end

  module BlankLine0
    def line_break1
      elements[0]
    end

    def line_break2
      elements[2]
    end

  end

  def _nt_blank_line
    start_index = index
    if node_cache[:blank_line].has_key?(index)
      cached = node_cache[:blank_line][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_line_break
    s0 << r1
    if r1
      r3 = _nt_nbsp
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r4 = _nt_line_break
        s0 << r4
        if r4
          r6 = _nt_space
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r5
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(BlankLine0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:blank_line][start_index] = r0

    r0
  end

end

class GiftParser < Treetop::Runtime::CompiledParser
  include Gift
end

